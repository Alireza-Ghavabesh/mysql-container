generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int        @id @default(autoincrement())
  firstName                 String?
  lastName                  String?
  email                     String?    @unique
  hashedPassword            String?
  phoneNumber               String?
  activationToken           String?
  isActivated               Boolean    @default(false)
  activationTokenExpireDate DateTime?
  isAdmin                   Boolean    @default(false)
  profileImageUrl           String?
  posts                     Post[]
  comments                  Comment[]
  favorites                 Favorite[]
  likes                     Like[]
  views                     View[] // Add this field for tracking views
  llikes                    LLike[]
}

model Post {
  id                       Int        @id @default(autoincrement())
  title                    String?
  postThumbnail            String? @default("")
  content                  String?
  date                     DateTime?
  jalaliDate               String?
  score                    Int?
  category                 String?
  comments                 Comment[]
  videos                   Video[]
  images                   Image[]
  favorites                Favorite[]
  likes                    Like[]
  tags                     PostTag[]
  views                    View[] 
  User                     User?      @relation(fields: [userId], references: [id])
  userId                   Int?

  JadidtarinSokhanraniHa   JadidtarinSokhanraniHa?      @relation(fields: [jadidtarinSokhanraniHaId], references: [id])
  jadidtarinSokhanraniHaId Int?

  JadidtarinClipiHa        JadidtarinClipiHa?      @relation(fields: [jadidtarinClipiHaId], references: [id])
  jadidtarinClipiHaId      Int?

  BargozideVahedHa         BargozideVahedHa?        @relation(fields: [bargozideVahedHaId], references: [id])
  bargozideVahedHaId       Int?
  
  JadidtarinFaaliatHayeOstad        JadidtarinFaaliatHayeOstad?        @relation(fields: [jadidtarinFaaliatHayeOstad], references: [id])
  jadidtarinFaaliatHayeOstad        Int?
}

model Tag {
  id      Int    @id @default(autoincrement())
  name    String
  posts   PostTag[]
}

model PostTag {
  postId  Int
  tagId   Int
  post    Post   @relation(fields: [postId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])
  @@id([postId, tagId])
}



model Comment {
  id     Int      @id @default(autoincrement())
  text   String
  date   DateTime
  user   User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  post   Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?

  parent   Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[] @relation("ParentChild")
  parentId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Llike     LLike[]
}

model LLike {
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId    Int
  commentId Int

  @@id([userId, commentId])
}

model Video {
  id        Int     @id @default(autoincrement())
  thumbnail String?
  url       String
  post      Post?   @relation(fields: [postId], references: [id])
  postId    Int?
  audios    Audio[]
}

model Audio {
  id      Int    @id @default(autoincrement())
  key     String
  url     String
  video   Video? @relation(fields: [videoId], references: [id])
  videoId Int?
}

model Favorite {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
  post   Post? @relation(fields: [postId], references: [id])
  postId Int?
}

model Image {
  id     Int    @id @default(autoincrement())
  url    String
  post   Post?  @relation(fields: [postId], references: [id])
  postId Int?
}

model Like {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
  post   Post? @relation(fields: [postId], references: [id])
  postId Int?
}

model View {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
  post   Post? @relation(fields: [postId], references: [id])
  postId Int?
  // You can add additional fields like timestamp or IP address if needed
}

model siteContent {
  id     Int   @id @default(autoincrement())
  bannerUrl String
  smallBannerLeftUrl String
  smallBannerMidUrl String
  smallBannerRighttUrl String
  footerBannerUrl String
}

model JadidtarinSokhanraniHa {
  id     Int   @id @default(autoincrement())
  // each JadidtarinSokhanraniHa can have many Post
  posts Post[]
}

model JadidtarinClipiHa {
  id     Int   @id @default(autoincrement())
  // each JadidtarinSokhanraniHa can have many Post
  posts Post[]
}

model BargozideVahedHa {
  id     Int   @id @default(autoincrement())
  // each JadidtarinSokhanraniHa can have many Post
  posts Post[]
}

model JadidtarinFaaliatHayeOstad {
  id     Int   @id @default(autoincrement())
  // each JadidtarinSokhanraniHa can have many Post
  posts Post[]
}
